def CONTRACT_ADDRESS
def TRANSACTION_HASH

pipeline {
    agent any

    environment {
        REGISTRY_HOST = "192.168.56.200:5000"
        USER_EMAIL = 'ssassaium@gmail.com'
        USER_ID = 'kaebalsaebal'
        SERVICE_NAME = 'backend_smart_contract'
    }

    parameters {
        string(name: 'PROJECT_ID', description: 'Unique identifier for the product.')
        string(name: 'TOKEN_NAME', description: 'The name of the token.')
        string(name: 'TOKEN_SYMBOL', description: 'The symbol of the token.')
        string(name: 'TOTAL_GOAL_AMOUNT', description: 'The total investment goal.')
        string(name: 'MIN_AMOUNT', description: 'The minimum investment amount.')
    }

    stages {        
        stage('Test') {
            steps {
                script {
                    echo 'Running tests in a Podman container...'
                    sh "podman run --rm -w /app ${REGISTRY_HOST}/${SERVICE_NAME}:latest npm run test"
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'ENV_FILE', variable: 'SECRET_FILE_PATH')]) {
                        def loadedEnvsString = sh(returnStdout: true, script: "cat ${SECRET_FILE_PATH} | xargs").trim()
                        def envList = loadedEnvsString.tokenize(' ').collect { it.trim() }

                        withEnv(envList) {
                            withEnv([
                                "PROJECT_ID=${params.PROJECT_ID}",
                                "TOKEN_NAME=${params.TOKEN_NAME}",
                                "TOKEN_SYMBOL=${params.TOKEN_SYMBOL}",
                                "TOTAL_GOAL_AMOUNT=${params.TOTAL_GOAL_AMOUNT}",
                                "MIN_AMOUNT=${params.MIN_AMOUNT}",
                            ]) {
                                echo 'Running deployment in a Podman container...'

                                def envArgs = envList.collect { "-e ${it}" }.join(" ") +
                                            " -e PROJECT_ID=${params.PROJECT_ID}" +
                                            " -e TOKEN_NAME=${params.TOKEN_NAME}" +
                                            " -e TOKEN_SYMBOL=${params.TOKEN_SYMBOL}" +
                                            " -e TOTAL_GOAL_AMOUNT=${params.TOTAL_GOAL_AMOUNT}" +
                                            " -e MIN_AMOUNT=${params.MIN_AMOUNT}"

                                def deployOutput = sh(
                                    returnStdout: true,
                                    script: """
                                        podman run --rm -w /app ${envArgs} ${REGISTRY_HOST}/${SERVICE_NAME}:latest npm run deploy
                                    """
                                ).trim()

                                echo "${deployOutput}"

                                def txMatcher = (deployOutput =~ /tx:\s*(0x[a-fA-F0-9]{64})\)/)
                                if (txMatcher.find()) { 
                                    TRANSACTION_HASH = txMatcher.group(1)
                                } else {
                                    error("Failed to extract transaction hash from deploy output.")
                                }

                                def contractMatcher = (deployOutput =~ /FractionalInvestmentToken deployed to (0x[a-fA-F0-9]{40})/)
                                if (contractMatcher.find()) { 
                                    CONTRACT_ADDRESS = contractMatcher.group(1)
                                } else {
                                    error("Failed to extract contract address.")
                                }

                                echo "Deployed contract address: ${CONTRACT_ADDRESS}"
                            }
                        }
                    }
                }
            }
        }
    }
    
   post {
        success {
            script {
                withCredentials([file(credentialsId: 'ENV_FILE', variable: 'SECRET_FILE_PATH')]) {
                    def envLines = sh(returnStdout: true, script: "cat ${SECRET_FILE_PATH}").trim().split('\n').toList()
                    
                    withEnv(envLines) {
                        echo 'Deployment Pipeline Succeeded!'
                        
                        sh """
                            curl -X POST \\
                            -H "Content-Type: application/json" \\
                            -d '{
                                    "projectId":"${params.PROJECT_ID}",
                                    "address":"${CONTRACT_ADDRESS}",
                                    "transactionHash":"${TRANSACTION_HASH}",
                                    "status":"success"
                                }' \\
                            "${env.DEPLOY_RESULT_API_URL}"
                        """
                    }
                }
            }
        }
        failure {
            script {
                withCredentials([file(credentialsId: 'ENV_FILE', variable: 'SECRET_FILE_PATH')]) {
                    def envLines = sh(returnStdout: true, script: "cat ${SECRET_FILE_PATH}").trim().split('\n').toList()
                    
                    withEnv(envLines) {
                        echo 'Deployment Pipeline Failed!'
                        
                        sh """
                            curl -X POST \\
                            -H "Content-Type: application/json" \\
                            -d '{
                                    "projectId":"${params.PROJECT_ID}",
                                    "address":"${CONTRACT_ADDRESS}",
                                    "transactionHash":"${TRANSACTION_HASH}",
                                    "status":"failure"
                                }' \\
                            "${env.DEPLOY_RESULT_API_URL}"
                        """
                    }
                }
            }
        }
    }
}
